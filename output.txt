Utils.java
package com.lds.matricula_facil.util;

import com.lds.matricula_facil.model.Usuario;
import com.lds.matricula_facil.model.enums.Status;
import com.lds.matricula_facil.model.Disciplina;
import java.util.List;
import java.util.stream.Collectors; // Add this import statement

public class Utils {

    public boolean isNumeric(String str) {
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    public Usuario realizarLogin(String email, String senha) {
        return Persistence.getInstance().getUsuarios().stream()
        .filter(usuario -> 
        usuario.getEmail().equals(email) && usuario.getSenha().equals(senha))
        .findFirst()
        .orElse(null);
    }

    public List<Disciplina> getDisciplinasAtivas() {
        return Persistence.getInstance().getDisciplinas().stream()
        .filter(disciplina -> disciplina.getStatus().equals(Status.ATIVA))
        .collect(Collectors.toList());
    }

}

======
ModuloAluno.java
package com.lds.matricula_facil.util;

import com.lds.matricula_facil.model.Aluno;
import com.lds.matricula_facil.model.Disciplina;
import com.lds.matricula_facil.model.Turma;
import com.lds.matricula_facil.model.enums.Status;

import java.util.Scanner;

public class ModuloAluno {
    // Atributos, construtores e métodos da classe aqui
    Scanner scanner = new Scanner(System.in);
    Persistence persistence = Persistence.getInstance();
    Utils utils = new Utils();

    Aluno aluno = null;

    int option = 0;

    // Exemplo de construtor
    public ModuloAluno() {
        System.out.println("Realize o login para acessar o sistema");
        realizarLogin();
        System.out.println(
                "Selecione o que deseja fazer: \n1- Realizar matrícula\n2- Cancelar matrícula\n3- Visualizar matrículas\nVisualizar disciplinas\n0- Sair");
        scanner.nextInt();
        scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
        switch (option) {
            case 1:
                realizarMatricula();
                break;
            case 2:
                cancelarMatricula();
                break;
            case 3:
                visualizarMatriculas();
                break;
            case 4:
                visualizarDisciplinas();
                break;
            case 0:
                break;
            default:
                break;
        }

    }

    public void realizarLogin() {
        System.out.println("Digite o email do aluno: ");
        String email = scanner.nextLine();
        System.out.println("Digite a senha do aluno: ");
        String senha = scanner.nextLine();
        aluno = ((Aluno) utils.realizarLogin(email, senha));
        if (aluno == null) {
            System.out.println("Usuário não encontrado");
            return;
        }
    }

    public boolean realizarMatricula() {
        System.out.println("Digite o nome ou id da disciplina: ");
        String identificacaoDisciplina = scanner.nextLine();
        Disciplina disciplina = persistence.getDisciplinaByIdOrNome(identificacaoDisciplina);
        if (disciplina == null) {
            System.out.println("Disciplina não encontrada");
            return false;
        }
        if (disciplina.getStatus() != Status.ATIVA) {
            System.out.println("A disciplina deve estar ativa para realizar a matrícula");
            return false;
        }
        for (Turma turma : disciplina.getTurmas()) {
            if (turma.matricularAluno(aluno)) {
                System.out.println("Matrícula realizada com sucesso na turma " + turma.getNome() + " da disciplina "
                        + disciplina.getNome());
                return true;
            } else {
                System.out.println("Não foi possível realizar a matrícula: ");
                return false;
            }
        }
        return true;
    }

    public boolean cancelarMatricula() {
        System.out.println("Digite o nome ou id da disciplina: ");
        String identificacaoDisciplina = scanner.nextLine();
        Disciplina disciplina = persistence.getDisciplinaByIdOrNome(identificacaoDisciplina);
        if (disciplina == null) {
            System.out.println("Disciplina não encontrada");
            return false;
        }
        for (Turma turma : disciplina.getTurmas()) {
            if (turma.cancelarMatricularAluno(aluno)) {
                System.out.println("Matrícula cancelada com sucesso na turma " + turma.getNome() + " da disciplina " + disciplina.getNome());
                return true;
            } else {
                System.out.println("Não foi possível cancelar a matrícula: ");
                return false;
            }
        }
        return true;
    }

    public void visualizarMatriculas() {
        System.out.println("Turmas matriculadas: ");
        aluno.turmasMatriculado().forEach(turma -> {
            System.out.println(turma.toString());
        });
    }

    public void visualizarDisciplinas() {
        utils.getDisciplinasAtivas().forEach(disciplina -> {
            System.out.println(disciplina.toString());
        });
    }
}
======
ModuloProfessor.java

======
ModuloSecretaria.java
package com.lds.matricula_facil.util;

import com.lds.matricula_facil.model.Aluno;
import com.lds.matricula_facil.model.Curriculo;
import com.lds.matricula_facil.model.Curso;
import com.lds.matricula_facil.model.Disciplina;
import com.lds.matricula_facil.model.Professor;
import com.lds.matricula_facil.model.Turma;
import com.lds.matricula_facil.model.enums.Status;
import com.lds.matricula_facil.model.enums.TipoDisciplina;

import java.util.Scanner;

public class ModuloSecretaria {

    private static Persistence persistence = Persistence.getInstance();
    private static Utils utils = new Utils();
    private Scanner scanner = new Scanner(System.in);

    public ModuloSecretaria() {

    }

    ////////////////////
    // Section: Aluno //
    ////////////////////
    /**
     * Realiza o cadastro de um aluno.
     */
    public void cadastrarAluno() {
        String nome = "";
        String email = "";
        String senha = "";
        System.out.println("Digite o nome do aluno: ");
        nome = scanner.nextLine();
        System.out.println("Digite o email do aluno: ");
        email = scanner.nextLine();
        System.out.println("Digite a senha do aluno: ");
        senha = scanner.nextLine();
        persistence.saveUsuario(new Aluno(nome, email, senha));
    }

    public void updateAluno() {
        String input = scanner.nextLine();
        System.out.println("Digite o id ou nome do aluno: ");
        input = scanner.nextLine();
        Aluno aluno = (Aluno) persistence.getUsuarioByIdOrNome(input);
        if (aluno != null) {
            System.out.println("O que deseja atualizar?");
            System.out.println("1 - Nome \n 2 - Email \n 9 - Salvar \n 0 - Cancelar");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
            while (option != 9) {
                switch (option) {
                    case 1:
                        System.out.println("Digite o novo nome do aluno: ");
                        aluno.setNome(scanner.nextLine());
                        break;
                    case 2:
                        System.out.println("Digite o novo email do aluno: ");
                        aluno.setEmail(scanner.nextLine());
                        break;
                    case 0:
                        return;
                    default:
                        System.out.println("Opção inválida!");
                        break;
                }
                System.out.println("O que deseja atualizar?");
                System.out.println("1 - Nome \n 2 - Email \n 9 - Salvar \n 0 - Cancelar");
                option = scanner.nextInt();
                scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
            }
        } else {
            System.out.println("Aluno não encontrado!");
        }
    }

    /**
     * Realiza a visualização de todos os alunos cadastrados.
     */
    public void visualizarAlunos() {
        persistence.getAlunos().forEach(aluno -> System.out.println(aluno.toString()));
    }

    ////////////////////////
    // Section: Professor //
    ////////////////////////

    /**
     * Realiza o cadastro de um professor.
     */
    public void cadastrarProfessor() {
        String nome = "";
        String email = "";
        String senha = "";
        String especialidade = "";
        System.out.println("Digite o nome do professor: ");
        nome = scanner.nextLine();
        System.out.println("Digite o email do professor: ");
        email = scanner.nextLine();
        System.out.println("Digite a senha do professor: ");
        senha = scanner.nextLine();
        System.out.println("Digite a especialidade do professor: ");
        especialidade = scanner.nextLine();
        persistence.saveUsuario(new Professor(nome, email, senha, especialidade));
    }

    public void updateProfessor(){
        String input = "";
        scanner.nextLine();
        System.out.println("Digite o id ou nome do professor: ");
        input = scanner.nextLine();
        Professor professor = (Professor) persistence.getUsuarioByIdOrNome(input);
        if (professor != null) {
            System.out.println("O que deseja atualizar?");
            System.out.println("1 - Nome \n 2 - Email \n 4 - Especialidade \n 9 - Salvar \n 0 - Cancelar");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
            while (option != 9) {
                switch (option) {
                    case 1:
                        System.out.println("Digite o novo nome do professor: ");
                        professor.setNome(scanner.nextLine());
                        break;
                    case 2:
                        System.out.println("Digite o novo email do professor: ");
                        professor.setEmail(scanner.nextLine());
                        break;
                    case 4:
                        System.out.println("Digite a nova especialidade do professor: ");
                        professor.setEspecialidade(scanner.nextLine());
                        break;
                    case 0:
                        return;
                    default:
                        System.out.println("Opção inválida!");
                        break;
                }
                System.out.println("O que deseja atualizar?");
                System.out.println("1 - Nome \n 2 - Email \n 4 - Especialidade \n 9 - Salvar \n 0 - Cancelar");
                option = scanner.nextInt();
                scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
            }
        } else {
            System.out.println("Professor não encontrado!");
        }
    }

    public void listarProfessores(){
        persistence.getProfessores().forEach(professor -> System.out.println(professor.toString()));
    }

    //////////////////////
    // Section: Usuario //
    //////////////////////

    public void visualizarUsuario() {
        String input = scanner.nextLine();
        System.out.println("Digite o id ou nome do usuário: ");
        System.out.println(persistence.getUsuarioByIdOrNome(input).toString());
    }

    /**
     * Cancela o cadastro de um usuário, seja ele aluno ou professor.
     */
    public void cancelarCadastrarUsuario() {
        String input = scanner.nextLine();

        System.out.println("Digite o id ou nome do usuário: ");
        if (persistence.deleteUsuarioByIdOrNome(input)) {
            System.out.println("Registro do usuário deletado com sucesso!");
        } else {
            System.out.println("Não foi deletar o resistro do usuário!");
        }
    }

    /////////////////////////
    // Section: Disciplina //
    /////////////////////////

    /**
     * Realiza o cadastro de uma disciplina.
     */
    public void cadastrarDisciplina() {
        String nome = "";
        TipoDisciplina tipo = null;
        Status status = null;

        System.out.println("Digite o nome da disciplina: ");
        nome = scanner.nextLine();
        System.out.println("Digite o tipo da disciplina: ");
        System.out.println("1 - OBRIGATORIA /n 2 - OPTATIVA");
        tipo = TipoDisciplina.getfromValue(scanner.nextInt());
        scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
        System.out.println("Digite o status da disciplina: ");
        System.out.println("1 - ATIVA /n 2 - INATIVA /n 3 - ENCERRADA");
        status = Status.getFromValue(scanner.nextInt());
        persistence.saveDisciplina(new Disciplina(nome, tipo, status));
    }

    /**
     * Realiza a visualização de uma disciplina.
     */
    public void visualizarDisciplina() {
        scanner.nextLine(); //consumir possível \n
        System.out.println("Digite o id ou nome da disciplina: ");
        String input = scanner.nextLine();
        System.out.println(persistence.getDisciplinaByIdOrNome(input).toString());
    }

    /**
     * Realiza a visualização de todas as disciplinas cadastradas.
     */
    public void visualizarDisciplinas() {
        persistence.getDisciplinas().forEach(disciplina -> System.out.println(disciplina.toString()));
    }

    public void visualizarTurmasDisciplina(){
        System.out.println("Digite o id ou nome da disciplina: ");
        String input = scanner.nextLine();
        Disciplina disciplina = persistence.getDisciplinaByIdOrNome(input);
        disciplina.getTurmas().forEach(turma -> { System.out.println(turma.toString()); });
    }

    public void removerDiscipplina(){
        System.out.println("Digite o nome ou id da disciplina que deseja remover:");
        scanner.nextLine(); // consumir possível \n
        scanner.nextLine();
        Disciplina disciplina = persistence.getDisciplinaByIdOrNome(scanner.nextLine());
        disciplina.setStatus(Status.INATIVA);
    }

    public void updateDisciplina(){
        String input = "";
        scanner.nextLine();
        System.out.println("Digite o id ou nome da disciplina: ");
        input = scanner.nextLine();
        Disciplina disciplina = persistence.getDisciplinaByIdOrNome(input);
        if (disciplina != null) {
            System.out.println("O que deseja atualizar?");
            System.out.println("1 - Nome \n 2 - Tipo \n 3 - Status \n 9 - Salvar \n 0 - Cancelar");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
            while (option != 9) {
                switch (option) {
                    case 1:
                        System.out.println("Digite o novo nome da disciplina: ");
                        disciplina.setNome(scanner.nextLine());
                        break;
                    case 2:
                        System.out.println("Digite o novo tipo da disciplina: ");
                        System.out.println("1 - OBRIGATORIA /n 2 - OPTATIVA");
                        disciplina.setTipo(TipoDisciplina.getfromValue(scanner.nextInt()));
                        scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
                        break;
                    case 3:
                        System.out.println("Digite o novo status da disciplina: ");
                        System.out.println("1 - ATIVA /n 2 - INATIVA /n 3 - ENCERRADA");
                        disciplina.setStatus(Status.getFromValue(scanner.nextInt()));
                        scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
                        break;
                    case 0:
                        return;
                    default:
                        System.out.println("Opção inválida!");
                        break;
                }
                System.out.println("O que deseja atualizar?");
                System.out.println("1 - Nome \n 2 - Tipo \n 3 - Status \n 9 - Salvar \n 0 - Cancelar");
                option = scanner.nextInt();
                scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
            }
        } else {
            System.out.println("Disciplina não encontrada!");
        }

    }

    public void abrirTurma(){
        scanner.nextLine();
        System.out.println("Digite o id ou nome da disciplina: ");
        String input = scanner.nextLine();
        Disciplina disciplina = persistence.getDisciplinaByIdOrNome(input);
        if(disciplina != null){
            System.out.println("Digite o id ou nome do professor: ");
            input = scanner.nextLine();
            Professor professor = (Professor) persistence.getUsuarioByIdOrNome(input);
            if(professor != null){
                disciplina.abrirNovaTurma(professor);
            }else{
                System.out.println("Professor não encontrado!");
            }
        }else{
            System.out.println("Disciplina não encontrada!");
        }
    }

    ////////////////////
    // Section: Curso //
    ////////////////////

    public void cadastrarCurso() {
        String nome = "";
        int creditos = 0;

        scanner.nextLine(); //consumir possível \n
        System.out.println("Digite o nome do curso: ");
        nome = scanner.nextLine();
        System.out.println("Digite a quantidade de créditos do curso: ");
        creditos = scanner.nextInt();
        scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
        persistence.saveCurso(new Curso(nome, creditos));
    }

    public void visualizarCurso() {
        scanner.nextLine(); //consumir possível \n
        System.out.println("Digite o id ou nome do curso: ");
        String input = scanner.nextLine();
        System.out.println(persistence.getCursoByIdOrNome(input).toString());
    }

    public void visualizarCursos() {
        persistence.getCursos().forEach(curso -> System.out.println(curso.toString()));
    }

    public void removerCurso(){
        System.out.println("Digite o nome ou id do curso que deseja remover:");
        scanner.nextLine(); // consumir possível \n
        scanner.nextLine();
        persistence.deleteCurso(scanner.nextLine());
    }

    public void verDisciplinasCurso(){
        String input = "";
        scanner.nextLine();
        System.out.println("Digite o nome ou id do curso que deseja ver as disciplinas: ");
        persistence.getCursoByIdOrNome(input).getDisciplinas().forEach(disciplina -> {System.out.println(disciplina.toString());});
    }

    public void updateCurso(){
        String input = "";
        scanner.nextLine();
        System.out.println("Digite o nome ou id do curso que deseja atualizar: ");
        input = scanner.nextLine();
        Curso curso = persistence.getCursoByIdOrNome(input);
        if (curso != null) {
            System.out.println("O que deseja atualizar?");
            System.out.println("1 - Nome \n 2 - Creditos \n 9 - Salvar \n 0 - Cancelar");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
            while (option != 9) {
                switch (option) {
                    case 1:
                        System.out.println("Digite o novo nome do curso: ");
                        curso.setNome(scanner.nextLine());
                        break;
                    case 2:
                        System.out.println("Digite a nova quantidade de créditos do curso: ");
                        curso.setCreditos(scanner.nextInt());
                        scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
                        break;
                    case 0:
                        return;
                    default:
                        System.out.println("Opção inválida!");
                        break;
                }
                System.out.println("O que deseja atualizar?");
                System.out.println("1 - Nome \n 2 - Creditos \n 9 - Salvar \n 0 - Cancelar");
                option = scanner.nextInt();
                scanner.nextLine(); // Consumindo o \n deixado pelo .nextInt()
            }
        } else {
            System.out.println("Curso não encontrado!");
        }
    }

    ////////////////////////
    // Section: Curriculo //
    ////////////////////////

    public void gerarCurriculo() {
        int ano, semestre;
        System.out.println("Digite o ano do currículo"); //Assim ou pegar automaticamente pelo tempo do sistema?
        ano = scanner.nextInt();
        scanner.nextLine(); //consumir \n que pode ficar
        System.out.println("Digite o semestre do currículo");
        semestre = scanner.nextInt();
        scanner.nextLine(); //consumir \n que pode ficar
        Curriculo curriculo = new Curriculo(ano, semestre);

        for (Curso curso : persistence.getCursos()) {
            for (Disciplina disciplina : curso.getDisciplinas().stream().filter(disciplina -> disciplina.getStatus() == Status.ATIVA).toArray(Disciplina[]::new)) {
                for (Turma turma : disciplina.getTurmas().stream().filter(turma -> turma.getStatus() == Status.ATIVA).toArray(Turma[]::new)){
                    curriculo.addTurma(turma);
                    turma.setStatus(Status.ENCERRADA);
                }
            }   
        }
        persistence.saveCurriculo(curriculo);
    }

    public void visualizarCurriculos() {
        persistence.getCurriculos().forEach(curriculo -> System.out.println(curriculo.toString()));
    }

    public void visualizarTurmasDeUmCurriculo(){
        int input = 0;
        System.out.println("Digite o id do currículo que deseja ver as turmas: ");
        input = scanner.nextInt();
        Curriculo curriculo = persistence.getCurriculoById(input);
        System.out.println("Número de turmas: " + curriculo.getTurmas().size() + "\nTurmas: \n");
        curriculo.getTurmas().forEach(turma -> System.out.println(turma.toString()));
    }

}
======
Persistence.java
package com.lds.matricula_facil.util;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import com.lds.matricula_facil.model.Aluno;
import com.lds.matricula_facil.model.Curriculo;
import com.lds.matricula_facil.model.Curso;
import com.lds.matricula_facil.model.Disciplina;
import com.lds.matricula_facil.model.Professor;
import com.lds.matricula_facil.model.Usuario;
import com.lds.matricula_facil.model.enums.Status;
import com.lds.matricula_facil.model.enums.TipoDisciplina;

public class Persistence {
    private static Persistence instance = null;
    public List<Usuario> usuarios = new ArrayList<>();;
    public List<Curso> cursos = new ArrayList<>();;
    public List<Curriculo> curriculos = new ArrayList<>();;
    public List<Disciplina> disciplinas = new ArrayList<>();
    private Utils utils = new Utils();

    private Persistence() {
    }

    public static Persistence getInstance() {
        if (instance == null) {
            instance = new Persistence();
            instance.addInitialData();
        }
        return instance;
    }
      //////////////////////
     // Section: Usuario //
    //////////////////////

    public void saveUsuario(Usuario usuario) {
        if (getUsuarioByIdOrNome(usuario.getNome()) != null) {
            System.out.println("Usuário já cadastrado");
            return;
        }
        usuarios.add(usuario);
    }

    public Usuario getUsuario(Usuario usuario) {
        return usuarios.stream().filter(user -> user.getId() == usuario.getId()).findFirst().orElse(null);
    }
        

    public List<Usuario> getUsuarios() {
        return usuarios;
    }

    public Usuario getUsuarioByIdOrNome(String idOrNome) {
        if (utils.isNumeric(idOrNome)) {
            int id = Integer.parseInt(idOrNome);
            return usuarios.stream().filter(usuario -> usuario.getId() == id).findFirst().orElse(null);
        } else {
            return usuarios.stream().filter(usuario -> usuario.getNome().equalsIgnoreCase(idOrNome)).findFirst()
                    .orElse(null);
        }
    }

    public boolean deleteUsuarioByIdOrNomee(String idOrNome) {
        Usuario usuario = getUsuarioByIdOrNome(idOrNome);
        if (usuario != null) {
            usuarios.remove(usuario);
            return true;
        }
        return false;
    }

    public boolean deleteUsuarioByIdOrNome(String idOrNome) {
        return usuarios.remove(getUsuarioByIdOrNome(idOrNome));
    }

      ////////////////////
     // Section: Aluno //
    ////////////////////

    public boolean updateAluno(Aluno aluno) {
        Aluno alunoToUpdate = (Aluno) getUsuario(aluno);
        if (alunoToUpdate != null) {
            alunoToUpdate.setNome(aluno.getNome());
            alunoToUpdate.setEmail(aluno.getEmail());
            alunoToUpdate.setSenha(aluno.getSenha());
            return true;
        }
        return false;
    }

    public List<Aluno> getAlunos() {
        return usuarios.stream()
                .filter(usuario -> usuario instanceof Aluno)
                .map(usuario -> (Aluno) usuario)
                .collect(Collectors.toList());
    }

      ////////////////////////
     // Section: Professor //
    ////////////////////////

    public List<Professor> getProfessores() {
        return usuarios.stream()
                .filter(usuario -> usuario instanceof Professor)
                .map(usuario -> (Professor) usuario)
                .collect(Collectors.toList());
    }

    public boolean updateProfessor(Professor professor){
        Professor professorToUpdate = (Professor) getUsuario(professor);
        if (professorToUpdate != null ){
            professorToUpdate.setNome(professor.getNome());
            professorToUpdate.setEmail(professor.getEmail());
            professorToUpdate.setSenha(professor.getSenha());
            professorToUpdate.setEspecialidade(professor.getEspecialidade());;
            return  true;
        }
        return false;
    }

    
      ////////////////////
     // Section: Curso //
    ////////////////////
     public boolean saveCurso(Curso curso) {
        if (getCursoByIdOrNome(curso.getNome()) != null) {
            System.out.println("Curso já cadastrado");
            return false;
        }
        cursos.add(curso);
        return true;
    }

    public List<Curso> getCursos() {
        return cursos;
    }

    public Curso getCursoByIdOrNome(String idOrNome) {
        if (utils.isNumeric(idOrNome)) {
            int id = Integer.parseInt(idOrNome);
            return cursos.stream().filter(curso -> curso.getId() == id).findFirst().orElse(null);
        } else {
            return cursos.stream().filter(curso -> curso.getNome().equalsIgnoreCase(idOrNome)).findFirst().orElse(null);
        }
    }

    public boolean deleteCurso(String idOrNome) {
        Curso curso = getCursoByIdOrNome(idOrNome);
        if (curso != null) {
            cursos.remove(curso);
            return true;
        }
        return false;
    }

    public boolean updateCurso(Curso curso){
        Curso cursoToUpdate = getCursoByIdOrNome(Integer.toString(curso.getId()));
        if (cursoToUpdate != null){
            cursoToUpdate.setNome(curso.getNome());
            cursoToUpdate.setCreditos(curso.getCreditos());
            return true;
        }
        return false;
    }
      ////////////////////////
     // Section: Curriculo //
    ////////////////////////
    public void saveCurriculo(Curriculo curriculo) {
        curriculos.add(curriculo);
    }

    public List<Curriculo> getCurriculos() {
        return curriculos;
    }

    public Curriculo getCurriculoById(int id) {
        for (Curriculo curriculo : curriculos) {
            if (curriculo.getId() == id) {
                return curriculo;
            }
        }
        return null;
    }

    public List<Curriculo> getCurriculosByAno(int ano) {
        List<Curriculo> curriculosAno = new ArrayList<>();
        for (Curriculo curriculo : curriculos) {
            if (curriculo.getAno() == ano) {
                curriculosAno.add(curriculo);
            }
        }
        return curriculosAno;
    }

    public List<Curriculo> getCurriculosBySemestre(int ano, int semestre) {
        List<Curriculo> curriculosSemestre = new ArrayList<>();
        ;
        for (Curriculo curriculo : curriculos) {
            if (curriculo.getAno() == ano && curriculo.getSemestre() == semestre) {
                curriculosSemestre.add(curriculo);
            }
        }
        return curriculosSemestre;
    }

      /////////////////////////
     // Section: Disciplina //
    /////////////////////////
    public void saveDisciplina(Disciplina disciplina) {
        if (getDisciplinaByIdOrNome(disciplina.getNome()) != null) {
            System.out.println("Disciplina já cadastrada");
            return;
        }
        disciplinas.add(disciplina);
    }

    public List<Disciplina> getDisciplinas() {
        return disciplinas;
    }

    public Disciplina getDisciplinaByIdOrNome(String idOrNome) {
        if (utils.isNumeric(idOrNome)) {
            int id = Integer.parseInt(idOrNome);
            return disciplinas.stream().filter(disciplina -> disciplina.getId() == id).findFirst().orElse(null);
        } else {
            return disciplinas.stream().filter(disciplina -> disciplina.getNome().equalsIgnoreCase(idOrNome))
                    .findFirst().orElse(null);
        }
    }

    public boolean updateDisciplina(Disciplina disciplina){
        Disciplina disciplinaToUpdate = getDisciplinaByIdOrNome(Integer.toString(disciplina.getId()));
        if (disciplinaToUpdate != null){
            disciplinaToUpdate.setNome(disciplina.getNome());
            disciplinaToUpdate.setStatus(disciplina.getStatus());
            disciplinaToUpdate.setTipo(disciplina.getTipo());
            return true;
        }
        else return false;
    }

       /////////////////////////////
      // Section: Dados iniciais //
     /////////////////////////////
    private void addInitialData() {
        // Adicionar 3 alunos
        saveUsuario(new Aluno("João", "alunoJoao@email.com", "123"));
        saveUsuario(new Aluno("Maria", "alunoMaria@email.com", "123"));
        saveUsuario(new Aluno("Ricardo", "alunoRicardo@email.com", "123"));

        // Adicionar 3 professores
        saveUsuario(new Professor("Patrick", "professorPatrick@email.com", "123", "História"));
        saveUsuario(new Professor("Pedro", "professorPedro@email.com", "123", "Matemática"));
        saveUsuario(new Professor("Piter", "professorPiter@email.com", "123", "Ciências"));

        // Adicionar 3 cursos
        saveCurso(new Curso("Engenharia de Software", 2000));
        saveCurso(new Curso("Engenharia de Mecânica", 2500));
        saveCurso(new Curso("Engenharia de Produção", 2500));

        // Adicionar 3 disciplinas
        saveDisciplina(new Disciplina("Matemática", TipoDisciplina.OBRIGATORIA, Status.ATIVA));
        saveDisciplina(new Disciplina("Física", TipoDisciplina.OBRIGATORIA, Status.ATIVA));
        saveDisciplina(new Disciplina("Química", TipoDisciplina.OBRIGATORIA, Status.ATIVA));

    }

}

======
Collectors.java
package com.lds.matricula_facil.util;

public class Collectors {

}

======
IdGenerator.java
package com.lds.matricula_facil.util;

public class IdGenerator {

    private static int lastId = 0;

    public static int generateId() {
        lastId++;
        return lastId;
    }

    public static int getLastId() {
        return lastId;
    }

}

======
Menu.java

======
