@startuml diagrama_de_classes

' Uma universidade pretende informatizar seu sistema de matrículas. A secretaria da universidade gera o currículo para cada semestre e mantém as informações sobre as disciplinas, professores e alunos.
' Cada curso tem um nome, um determinado número de créditos e é constituído por diversas disciplinas.
' Os alunos podem se matricular em 4 disciplinas como 1ª opção (obrigatórias) e em mais 2 outras alternativas (optativas).
' Há períodos para efetuar matrículas, durante os quais um aluno pode acessar o sistema para se matricular em disciplinas e/ou para cancelar matrículas feitas anteriormente.
' Uma disciplina só fica ativa, isto é, só vai ocorrer no semestre seguinte se, no final do período de matrículas tiver, pelo menos, 3 alunos inscritos (matriculados). Caso contrário, a disciplina será cancelada. O número máximo de alunos inscritos a uma disciplina é de 60 e quando este número é atingido, as inscrições (matrículas) para essa disciplina são encerradas.
' Após um aluno se inscrever para um semestre, o sistema de cobranças é notificado pelo sistema de matrículas, de modo que o aluno possa ser cobrado pelas disciplinas daquele semestre.
' Os professores podem acessar o sistema para saber quais são os alunos que estão matriculados em cada disciplina.
' Todos os usuários do sistema têm senhas que são utilizadas para validação do respectivo login.

enum TipoDisciplina <<enumeration>> {
  OBRIGATORIA
  OPTATIVA
}

enum StatusDisciplina <<enumeration>> {
  ATIVA
  INATIVA
  ENCERRADA
}

class Curriculo {
  int id
  int ano
  int semestre
  List<Turma> turmas
}

class Curso {
  int id
  String nome
  int creditos
  List<Disciplina> disciplinas
}

class Disciplina {
  int id
  String nome
  TipoDisciplina tipo
  StatusDisciplina status
  List<Turma> turmas

  +encerrarMatriculas()
  +cancelarMatriculas()
}

class Turma {
  int id
  String nome
  boolean ativa
  Professor professor
  List<Aluno> alunos
  Disciplina disciplina

  +adicionarAluno(Aluno aluno)
  +removerAluno(Aluno aluno)
  +estaCheia(): boolean
  +possuiQuantidadeMinimaDeAlunos(): boolean
}

abstract class Usuario {
  int id
  String nome
  String usuario
  String senha
}

class Aluno {
  +matricular(Turma turma)
  +cancelarMatricula(Turma turma)
}

class Professor {
  String especialidade
  List<Turma> turmas
}

' class Secretaria {
  
' }

Usuario <|-- Aluno
Usuario <|-- Professor
' Usuario <|- Secretaria

Disciplina - TipoDisciplina
Disciplina -- StatusDisciplina

Curso "1..*" o-- "0..*" Disciplina : contém
Turma "1..*" o-- "3..60" Aluno : possui
Disciplina "1" *-- "0..*" Turma : possui
Professor "1" *-- "1..*" Turma : é responsável por
Curriculo "1" o-- "1..*" Turma : contém

@enduml